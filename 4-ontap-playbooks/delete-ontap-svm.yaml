---
- hosts: localhost
  gather_facts: false
  vars_files:
    - ../config/ontap_vars.yaml
  vars:
    login: &login
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      https: true
      validate_certs: false
  tasks:
    - name: Get Ontap facts
      na_ontap_gather_facts:
        state: info
        <<: *login

    - name: Run ONTAP Cli Command to get LUNs    
      na_ontap_command:
        command: [" lun show -vserver {{vserver}} -fields vserver, path, volume, lun"]
        <<: *login
      register: luns

    - name: Unmap LUNs
      na_ontap_lun_map:
        state: absent
        initiator_group_name: kubernetesIgroup
        path: "{{ item.split(' ').1}}"
        vserver: "{{ vserver }}"
        <<: *login
      with_items: "{{ luns.msg.split('\n') }}"
      when: item is match(vserver)

    - name: Delete LUNs
      na_ontap_lun:
        state: absent
        name: "{{ item.split(' ').3}}"
        flexvol_name: "{{ item.split(' ').2}}"
        force_remove: true
        vserver: "{{ vserver }}"
        <<: *login
      with_items: "{{ luns.msg.split('\n') }}"
      when: item is match(vserver)

    - name: Run ONTAP Cli Command to get igroups
      na_ontap_command:
        command: ['igroup','show','-vserver "{{ vserver }}" -fields igroup']
        <<: *login
      register: igroupoutput

    - name: Delete igroups
      na_ontap_igroup:
        state: absent
        name: "{{ item.split(' ').1 }}"
        vserver: "{{ vserver }}"
        <<: *login
      with_items: "{{ igroupoutput.msg.split('\n') }}"
      when: item is match(vserver)

    - name: Run ONTAP Cli Command to get iscsi security iqns
      na_ontap_command:
        command: ["iscsi security show -vserver {{vserver}} -fields vserver, initiator-name"]
        <<: *login
      register: iqnsec

    - name: Delete iscsi security IQNs
      na_ontap_command:
        command: ["iscsi security delete -vserver {{vserver}} -initiator-name {{item.split(' ').1}}"]
        <<: *login
      with_items: "{{ iqnsec.msg.split('\n') }}"
      when: 
        - item is match(vserver) 
        - item is not match('default')

    - name: Run ONTAP Cli command to delete port set
      na_ontap_command:
        command: ["portset delete -vserver {{vserver}} -portset kubernetesPortSet -force"]
        <<: *login
      register: portSetResult

    - name: Run ONTAP Cli Command to get SnapMirrors
      na_ontap_command:
        command: ['snapmirror', 'list-destinations', '-source-vserver "{{ vserver }}" -fields destination-path, relationship-id']
        <<: *login
      register: snapmirrors

    - name: Run ONTAP Cli Command to delete SnapMirrors
      na_ontap_command:
        command: ['snapmirror', 'release', "-destination-path {{ item.split(' ').1 }}" , "-relationship-id {{ item.split(' ').2 }}"]
        <<: *login
      with_items: "{{ snapmirrors.msg.split('\n') }}"
      when: item is match(vserver)

    - pause:
        seconds: 2

    - name: Delete Interface(s)
      na_ontap_interface:
        state: absent
        interface_name: "{{ item}}"
        vserver: "{{ vserver }}"
        <<: *login
      with_items: "{{ ontap_facts.net_interface_info }}"
      when:  ontap_facts.net_interface_info[item].vserver  ==  vserver
      ignore_errors: yes

    - name: Delete Volume(s)
      na_ontap_volume:
        state: absent
        name: "{{ ontap_facts.volume_info[item].volume_id_attributes.name }}"
        vserver: "{{ vserver }}"
        <<: *login
      with_items: "{{ ontap_facts.volume_info }}"
      when:
        - ontap_facts.volume_info[item].volume_id_attributes.owning_vserver_name  ==  vserver
      
    - name: Run ONTAP Cli Command to get SVM Peers
      na_ontap_command:
        command: ['vserver', 'peer', 'show', "-vserver {{vserver}}", '-fields peer-vserver']
        <<: *login
      register: peers

    - name: Run ONTAP Cli Command to delete SVM Peers
      na_ontap_command:
        command: ['vserver', 'peer', 'delete', "-vserver {{vserver}}", "-peer-vserver {{ item.split(' ').1 }}", '-force']
        <<: *login
      with_items: "{{ peers.msg.split('\n') }}"
      when: item is match(vserver)

    - name: Delete Vserver
      na_ontap_svm:
        state: absent
        name: "{{ vserver }}"
        <<: *login
